// Copyright (c) technicianted. All rights reserved.
// Licensed under the MIT License.
syntax = "proto3";

option go_package = "k9sautoscaler/pkg/proto;proto";

import "google/protobuf/timestamp.proto";

message Metric {
    string name = 1;
    int64 target = 2;
}

message ScalingPolicy {
	// value contains the amount of change which is permitted by the policy.
	// It must be greater than zero
	int32 value = 1;

	// periodSeconds specifies the window of time for which the policy should hold true.
	// PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
	int32 period_seconds = 2;
}

message ScalingRules {
    enum PolicySelect {
        Unset = 0;
    	// MaxChangePolicySelect  selects the policy with the highest possible change.
	    Max = 1;
	    // MinChangePolicySelect selects the policy with the lowest possible change.
	    Min = 2;
	    // DisabledPolicySelect disables the scaling in this direction.
	    Disabled = 3;
    }

	// stabilizationWindowSeconds is the number of seconds for which past recommendations should be
	// considered while scaling up or scaling down.
	// StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
	// If not set, use the default values:
	// - For scale up: 0 (i.e. no stabilization is done).
	// - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
	optional int32 stabilization_window_seconds = 1;
	// selectPolicy is used to specify which policy should be used.
	// If not set, the default value Max is used.
	optional PolicySelect select_policy = 2;
	// policies is a list of potential scaling polices which can be used during scaling.
	// At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
	repeated ScalingPolicy policies = 3;
}

// Behavior configures the scaling behavior of the target
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
message Behavior {
	// scaleUp is scaling policy for scaling Up.
	// If not set, the default value is the higher of:
	//   * increase no more than 4 pods per 60 seconds
	//   * double the number of pods per 60 seconds
	// No stabilization is used.
	optional ScalingRules scale_up = 1;
	// scaleDown is scaling policy for scaling Down.
	// If not set, the default value is to allow to scale down to minReplicas pods, with a
	// 300 second stabilization window (i.e., the highest recommendation for
	// the last 300sec is used).
	optional ScalingRules scale_down = 2;
}

// Condition describes the state of
// an Autoscaler at a certain point.
message Condition {
    enum ConditionType {
		ScalingUnknown = 0;
        // ScalingActive indicates that the HPA controller is able to scale if necessary:
        // it's correctly configured, can fetch the desired metrics, and isn't disabled.
        ScalingActive = 1;
        // AbleToScale indicates a lack of transient issues which prevent scaling from occurring,
        // such as being in a backoff window, or being unable to access/update the target scale.
        AbleToScale = 2;
        // ScalingLimited indicates that the calculated scale based on metrics would be above or
        // below the range for the HPA, and has thus been capped.
        ScalingLimited = 3;
    }

	// type describes the current condition
	ConditionType type = 1;

	// status is the status of the condition (True, False, Unknown)
	string status = 2;

	// lastTransitionTime is the last time the condition transitioned from
	// one status to another
	optional google.protobuf.Timestamp last_transition_time = 3;

	// reason is the reason for the condition's last transition.
	string reason = 4;

	// message is a human-readable explanation containing details about
	// the transition
	string message = 5;
}

message AutoscalerSpec {
	int32 min = 1;
	int32 Max = 2;
	repeated Metric metrics = 3;
	optional Behavior behavior = 4;
}

message AutoscalerStatus {
	optional google.protobuf.Timestamp last_scale_time = 1;
	// CurrentScale is current scale managed by this autoscaler,
	// as last seen by the autoscaler.
	// +optional
	optional int32 current_scale = 2;
	// desiredScale is the desired scale managed by this autoscaler,
	// as last calculated by the autoscaler.
	int32 desired_scale = 3;
	// conditions is the set of conditions required for this autoscaler to scale its target,
	// and indicates whether or not those conditions are met.
	repeated Condition conditions = 4;
}

message Autoscaler {
	// Name must be unique within a namespace. Is required when creating autoscalers.
	// Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	string name = 1;
	// Namespace defines the space within which each name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	//
	// Must be a DNS_LABEL.
	// Cannot be updated.
	string namespace = 2;
	// An opaque value that represents the internal version of this object that can
	// be used by clients to determine when objects have changed. May be used for optimistic
	// concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and passed unmodified back to the server.
	// They may only be valid for a particular resource or set of resources.
	//
	// +optional
	string version  = 3;
	// spec is the specification for the behaviour of the autoscaler.
	AutoscalerSpec spec = 4;
	// status is the current information about the autoscaler.
	// +optional
	optional AutoscalerStatus status = 5;
}

// ScaleSpec describes the attributes of a scale.
message ScaleSpec {
	// the desired scale for the scaled object.
	int32 desired = 1;
}

// ScaleStatus represents the current status of a scale subresource.
message ScaleStatus {
	// replicas is the actual scale of the scaled object.
	int32 current = 1;
}

// Scale represents a scaling request for a resource.
message Scale {
	// spec defines the behavior of the scale.
	ScaleSpec spec = 1;
	// status is the current status of the scale.
	optional ScaleStatus status = 2;
}


message AutoscalerEvent {
	// This should be a short, machine understandable string that gives the reason
	// for the transition into the object's current status.
	// TODO: provide exact specification for format.
	string reason = 1;

	// A human-readable description of the status of this operation.
	// TODO: decide on maximum length.
	string message = 2;

	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	google.protobuf.Timestamp first_timestamp = 3;

	// The time at which the most recent occurrence of this event was recorded.
	// +optional
	google.protobuf.Timestamp last_timestamp = 4;

	// The number of times this event has occurred.
	int32 count = 5;

	// Type of this event (Normal, Warning), new types could be added in the future
	string type = 6;

	// Time when this Event was first observed.
	google.protobuf.Timestamp event_time = 7;

	// What action was taken/failed regarding to the Regarding object.
	string action = 8;
}
