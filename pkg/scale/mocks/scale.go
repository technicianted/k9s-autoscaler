// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	proto "k9s-autoscaler/pkg/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScaler is a mock of Scaler interface.
type MockScaler struct {
	ctrl     *gomock.Controller
	recorder *MockScalerMockRecorder
}

// MockScalerMockRecorder is the mock recorder for MockScaler.
type MockScalerMockRecorder struct {
	mock *MockScaler
}

// NewMockScaler creates a new mock instance.
func NewMockScaler(ctrl *gomock.Controller) *MockScaler {
	mock := &MockScaler{ctrl: ctrl}
	mock.recorder = &MockScalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScaler) EXPECT() *MockScalerMockRecorder {
	return m.recorder
}

// GetScale mocks base method.
func (m *MockScaler) GetScale(ctx context.Context, name, namespace string) (*proto.Scale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScale", ctx, name, namespace)
	ret0, _ := ret[0].(*proto.Scale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScale indicates an expected call of GetScale.
func (mr *MockScalerMockRecorder) GetScale(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScale", reflect.TypeOf((*MockScaler)(nil).GetScale), ctx, name, namespace)
}

// SetScaleTarget mocks base method.
func (m *MockScaler) SetScaleTarget(ctx context.Context, name, namespace string, target *proto.ScaleSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetScaleTarget", ctx, name, namespace, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetScaleTarget indicates an expected call of SetScaleTarget.
func (mr *MockScalerMockRecorder) SetScaleTarget(ctx, name, namespace, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScaleTarget", reflect.TypeOf((*MockScaler)(nil).SetScaleTarget), ctx, name, namespace, target)
}
